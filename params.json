{"name":"ScriptCS","tagline":"Unleash your C# from Visual Studio.","body":"# scriptcs\r\n\r\n\r\n## What is it?\r\n\r\nscriptcs makes it easy to write and execute C# with a simple text editor.\r\n\r\nWhile Visual Studio, and other IDEs, are powerful tools, they can sometimes hinder productivity more than they promote it. You donâ€™t always need, or want, the overhead of a creating a new solution or project. Sometimes you want to just type away in your favorite text editor.\r\n\r\nscriptcs frees you from Visual Studio, without sacrificing the advantages of a strongly-typed language. \r\n\r\n* Write C# in your favorite text editor.\r\n* Use NuGet to manage your dependencies.\r\n* The relaxed C# scripting syntax means you can write and execute an application with only one line of code. \r\n* Script Packs allow you to bootstrap the environment for new scripts, further reduces the amount of code necessary to take advantage of your favorite C# frameworks.\r\n\r\n\r\n## Getting scriptcs\r\n\r\nReleases and nightly builds should be installed using [Chocolatey](http://chocolatey.org/). To install Chocolatey, execute the following command in your command prompt:\r\n\r\n    @powershell -NoProfile -ExecutionPolicy Unrestricted -Command \"iex ((New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%systemdrive%\\chocolatey\\bin\r\n\r\n### Installing scriptcs\r\n\r\nOnce Chocolatey has been installed, you can install the latest stable version of scriptcs from your command prompt:\r\n\r\n    cinst scriptcs\r\n\r\nChocolatey will install scriptcs to `%APPDATA%\\scriptcs\\` and update your PATH accordingly.\r\n\r\n**Note:** You may need to restart your command prompt after the installation completes.\r\n\r\n### Staying up-to-date\r\n\r\nWith Chocolatey, keeping scriptcs updated is just as easy:\r\n\r\n    cup scriptcs\r\n\r\n### Nightly builds\r\n\r\nNightly builds are hosted on [MyGet](https://www.myget.org/), and can also be installed through with Chocolatey:\r\n\r\n    cinst scriptcs -pre -source https://www.myget.org/F/scriptcsnightly/ \r\n\r\n### Building from source\r\n\r\nExecute `build.cmd` to start the build script.\r\n\r\n\r\n## Getting Started\r\n\r\n### Using the REPL\r\nThe scriptcs REPL can be started by running scriptcs without any parameters. The REPL allows you to execute C# statements directly from your command prompt.\r\n\r\n```batchfile\r\nC:\\> scriptcs\r\nscriptcs (ctrl-c or blank to exit)\r\n\r\n> var message = \"Hello, world!\";\r\n> Console.WriteLine(message);\r\nHello, world!\r\n> \r\n\r\nC:\\>\r\n```\r\n\r\n### Writing a script\r\n\r\n* In an empty directory, create a new file named `app.csx`:\r\n\r\n```c#\r\nusing Raven.Client;\r\nusing Raven.Client.Embedded;\r\nusing Raven.Client.Indexes;\r\n\r\nConsole.WriteLine(\"Starting RavenDB server...\");\r\n\r\nEmbeddableDocumentStore documentStore = null;\r\ntry\r\n{\r\n    documentStore = new EmbeddableDocumentStore { UseEmbeddedHttpServer = true };\r\n    documentStore.Initialize();\r\n\r\n    var url = string.Format(\"http://localhost:{0}\", documentStore.Configuration.Port);\r\n    Console.WriteLine(\"RavenDB started, listening on {0}.\", url);\r\n\r\n    Console.ReadKey();\r\n}\r\nfinally\r\n{\r\n    if (documentStore != null)\r\n        documentStore.Dispose();\r\n}\r\n```\r\n\r\n* Install the [RavenDB.Embedded](https://nuget.org/packages/RavenDB.Embedded/) package from NuGet using the [install command](https://github.com/scriptcs/scriptcs/wiki/Package-installation).\r\n\r\n```batchfile\r\nscriptcs -install RavenDB.Embedded\r\n```\r\n\r\n* Execute your script. Note that listening on a port requires that the command prompt be launched using the **Run as Administrator** option.\r\n\r\n```batchfile\r\n> scriptcs app.csx\r\nINFO : Starting to create execution components\r\nINFO : Starting execution\r\nStarting RavenDB server...\r\n.. snip ..\r\nRavenDB started, listening on http://localhost:8080.\r\n```\r\n\r\n* Navigating to the URL that Raven is listening on will now bring up the RavenDB management studio.\r\n\r\n### Bootstrap scripts with Script Packs\r\n\r\nScript Packs can be used to further reduce the amount of code you need to write when working with common frameworks. \r\n\r\n* In an empty directory, install the [ScriptCs.WebApi](https://nuget.org/packages/ScriptCs.WebApi/) script pack from NuGet. The script pack will automatically imports the Web API namespaces and provides a convenient factory method for initializing the Web API host. It also replaces the default `ControllerResolver` with a custom implementation that allows Web API to discover controllers declared in scripts.\r\n\r\n```batchfile\r\nscriptcs -install ScriptCs.WebApi\r\n```\r\n\r\n* Script packs can be imported into a script by calling `Require<TScriptPack>()`. Create a file named `server.csx` that contains the following code:\r\n\r\n```c#\r\npublic class TestController : ApiController {\r\n    public string Get() {\r\n        return \"Hello world!\";\r\n    }\r\n}\r\n\r\nvar webApi = Require<WebApi>();\r\nvar server = webApi.CreateServer(\"http://localhost:8888\");\r\nserver.OpenAsync().Wait();\r\n\r\nConsole.WriteLine(\"Listening...\");\r\nConsole.ReadKey();\r\nserver.CloseAsync().Wait();\r\n```\r\n\r\n* In a command prompt running as administrator, execute the `server.csx` file.\r\n\r\n```batchfile\r\nscriptcs server.csx \r\n```\r\n\r\n* Browse to http://localhost:8888/test/ to see the result of the TestController.Get method.\r\n\r\n```xml\r\n<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">Hello world!</string>\r\n```\r\n\r\n### Referencing scripts\r\n\r\n* Move the TestController class from the previous example into a new file named `controller.csx` with the following content.\r\n\r\n* On the first line of `server.csx`, reference `controller.csx` using the [#load directive](https://github.com/scriptcs/scriptcs/wiki/Writing-a-script#loading-referenced-scripts). **Note:** #load directives must be placed at the top of a script, otherwise they will be ignored.\r\n\r\n```c#\r\n#load \"controller.csx\"\r\n```\r\n\r\n* In a command prompt running as administrator, execute the `server.csx` file.\r\n\r\n```batchfile\r\nscriptcs server.csx \r\n```\r\n\r\n* Browse to http://localhost:8888/test/ to see the result of the TestController.Get method.\r\n\r\n```xml\r\n<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">Hello world!</string>\r\n```\r\n\r\n\r\n### Referencing assemblies\r\n\r\nYou can reference additional assemblies from the GAC or from the bin folder in your script's directory using the [#r directive](https://github.com/scriptcs/scriptcs/wiki/Writing-a-script#referencing-assemblies):\r\n\r\n```c#\r\n#r \"nunit.core.dll\"\r\n#r \"nunit.core.interfaces.dll\"\r\n\r\nvar path = \"UnitTests.dll\";\r\nvar runner = TestSetup.GetRunner(new[] {path});\r\nvar result = runner.Run(new ConsoleListener(msg => Console.WriteLine(msg)), TestFilter.Empty, true,     LoggingThreshold.All);\r\n\r\nConsole.ReadKey();\r\n```\r\n\r\n\r\n## Contributing\r\n\r\n* Read our [Contribution Guidelines](https://github.com/scriptcs/scriptcs/blob/master/CONTRIBUTING.md). \r\n\r\n\r\n## Samples and Documentation\r\n\r\nAdditional samples can be contributed to our [samples repository](https://github.com/scriptcs/scriptcs-samples). Documentation can be found on our [wiki](https://github.com/scriptcs/scriptcs/wiki). \r\n\r\n\r\n## Community\r\n\r\nWant to chat? In addition to Twitter, you can find us on [Google Groups](https://groups.google.com/forum/?fromgroups#!forum/scriptcs) and [JabbR](https://jabbr.net/#/rooms/scriptcs)!\r\n\r\n\r\n## Coordinators\r\n\r\n* [Glenn Block](https://github.com/glennblock) ([@gblock](https://twitter.com/intent/user?screen_name=gblock))\r\n* [Justin Rusbatch](https://github.com/jrusbatch) ([@jrusbatch](https://twitter.com/intent/user?screen_name=jrusbatch))\r\n* [Filip Wojcieszyn](https://github.com/filipw) ([@filip_woj](https://twitter.com/intent/user?screen_name=filip_woj))\r\n\r\n\r\n## Credits \r\n\r\n* Check out the [list of developers](https://github.com/scriptcs/scriptcs/wiki/Contributors) responsible for getting scriptcs to where it is today! \r\n* Special thanks to Filip Wojcieszyn for being the inspiration behind this with his Roslyn Web API posts.\r\n* Thanks to the Roslyn team who helped point me in the right direction.\r\n\r\n\r\n## License \r\n\r\n[Apache 2 License](https://github.com/scriptcs/scriptcs/blob/master/LICENSE.md)\r\n","google":"UA-38995388-1","note":"Don't delete this file! It's used internally to help with page regeneration."}